2025-03-12 15:20:11,804 INFO: Use wandb logger with id=x; project=your_project_name.
2025-03-12 15:20:11,875 INFO: Dataset initialized with 1771 samples.
2025-03-12 15:20:11,875 INFO: Dataset VoxelnpzPngSingleDeblurDataset - highrev-train is created.
2025-03-12 15:20:11,875 INFO: Use cpu prefetch dataloader: num_prefetch_queue = 2
2025-03-12 15:20:11,876 INFO: Training statistics:
	Number of train images: 1771
	Dataset enlarge ratio: 6
	Batch size per gpu: 8
	World size (gpu number): 4
	Require iter number per epoch: 333
	Total epochs: 601; iters: 200000.
2025-03-12 15:20:11,889 INFO: Dataset initialized with 421 samples.
2025-03-12 15:20:11,889 INFO: Dataset VoxelnpzPngSingleDeblurDataset - highrev-val is created.
2025-03-12 15:20:11,889 INFO: Number of val images/folders in highrev-val: 421
2025-03-12 15:20:11,889 WARNING: pretrain_network path will be ignored during resuming.
2025-03-12 15:20:11,889 INFO: Set pretrain_network_g to /home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/experiments/KUnet_highrev_single_deblur_voxel/models/net_g_40000.pth
2025-03-12 15:20:17,724 INFO: Network: DistributedDataParallel - KUnet, with parameters: 140,943,581
2025-03-12 15:20:17,724 INFO: KUnet(
  (down1): DownLayer(
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(3, 3, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=3)
          (pointwise): Conv2d(3, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (down2): DownLayer(
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (down3): DownLayer(
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (down4): DownLayer(
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (pointwise): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
          (pointwise): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
    (pool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
  )
  (bottleneck): DoubleConv(
    (conv): Sequential(
      (0): DepthwiseSeparableConv(
        (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
        (pointwise): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvLayerNorm(
        (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (2): ReLU(inplace=True)
      (3): DepthwiseSeparableConv(
        (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
        (pointwise): Conv2d(1024, 1024, kernel_size=(1, 1), stride=(1, 1))
      )
      (4): ConvLayerNorm(
        (layer_norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
      )
      (5): ReLU(inplace=True)
    )
  )
  (event_encoder): EventEncoder(
    (conv1): Sequential(
      (0): DepthwiseSeparableConv(
        (depthwise): Conv2d(6, 6, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=6)
        (pointwise): Conv2d(6, 64, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ReLU(inplace=True)
    )
    (conv2): Sequential(
      (0): DepthwiseSeparableConv(
        (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=64)
        (pointwise): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ReLU(inplace=True)
    )
    (conv3): Sequential(
      (0): DepthwiseSeparableConv(
        (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=128)
        (pointwise): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ReLU(inplace=True)
    )
    (conv4): Sequential(
      (0): DepthwiseSeparableConv(
        (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=256)
        (pointwise): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ReLU(inplace=True)
    )
    (conv5): DepthwiseSeparableConv(
      (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
      (pointwise): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (fusion_layer): Conv2d(2048, 1024, kernel_size=(1, 1), stride=(1, 1))
  (tokenizer): PatchTokenizer(
    (proj): Conv2d(1024, 1024, kernel_size=(2, 2), stride=(2, 2))
    (norm): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
  )
  (self_attention): TokenSelfAttention(
    (attention): MultiheadAttention(
      (out_proj): NonDynamicallyQuantizableLinear(in_features=1024, out_features=1024, bias=True)
    )
    (norm1): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (norm2): LayerNorm((1024,), eps=1e-05, elementwise_affine=True)
    (ff): Sequential(
      (0): Linear(in_features=1024, out_features=4096, bias=True)
      (1): ReLU()
      (2): Linear(in_features=4096, out_features=1024, bias=True)
    )
    (dropout): Dropout(p=0.1, inplace=False)
  )
  (token_projection1): KANLinear(
    (base_activation): SiLU()
  )
  (token_projection2): KANLinear(
    (base_activation): SiLU()
  )
  (token_projection3): KANLinear(
    (base_activation): SiLU()
  )
  (up1): UpLayer(
    (up): Up(
      (up_scale): ConvTranspose2d(1024, 512, kernel_size=(2, 2), stride=(2, 2))
    )
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(1024, 1024, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1024)
          (pointwise): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
          (pointwise): Conv2d(512, 512, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((512,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
  )
  (up2): UpLayer(
    (up): Up(
      (up_scale): ConvTranspose2d(512, 256, kernel_size=(2, 2), stride=(2, 2))
    )
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=512)
          (pointwise): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (pointwise): Conv2d(256, 256, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
  )
  (up3): UpLayer(
    (up): Up(
      (up_scale): ConvTranspose2d(256, 128, kernel_size=(2, 2), stride=(2, 2))
    )
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=256)
          (pointwise): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (pointwise): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((128,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
  )
  (up4): UpLayer(
    (up): Up(
      (up_scale): ConvTranspose2d(128, 64, kernel_size=(2, 2), stride=(2, 2))
    )
    (conv): DoubleConv(
      (conv): Sequential(
        (0): DepthwiseSeparableConv(
          (depthwise): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=128)
          (pointwise): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (1): ConvLayerNorm(
          (layer_norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        )
        (2): ReLU(inplace=True)
        (3): DepthwiseSeparableConv(
          (depthwise): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=64)
          (pointwise): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1))
        )
        (4): ConvLayerNorm(
          (layer_norm): LayerNorm((64,), eps=1e-05, elementwise_affine=True)
        )
        (5): ReLU(inplace=True)
      )
    )
  )
  (last_conv): Conv2d(64, 3, kernel_size=(1, 1), stride=(1, 1))
)
2025-03-12 15:20:17,724 INFO: Loading KUnet model from /home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/experiments/KUnet_highrev_single_deblur_voxel/models/net_g_40000.pth.
 load net keys <built-in method keys of collections.OrderedDict object at 0x1554882564c0>
.. cosineannealingLR
2025-03-12 15:20:18,718 INFO: Model [ImageEventRestorationModel] is created.
2025-03-12 15:20:18,720 INFO: Resuming training from epoch: 459, iter: 40000.
2025-03-12 15:20:33,607 INFO: Start training from epoch: 459, iter: 40000
/home/ypatel37/.local/share/mamba/envs/ntire_env/lib/python3.9/site-packages/torch/nn/modules/conv.py:456: UserWarning: Applied workaround for CuDNN issue, install nvrtc.so (Triggered internally at ../aten/src/ATen/native/cudnn/Conv_v8.cpp:80.)
  return F.conv2d(input, weight, bias, self.stride,
/home/ypatel37/.local/share/mamba/envs/ntire_env/lib/python3.9/site-packages/torch/autograd/__init__.py:251: UserWarning: Grad strides do not match bucket view strides. This may indicate grad was not created according to the gradient layout contract, or that the param's strides changed since DDP was constructed.  This is not an error, but may impair performance.
grad.sizes() = [3, 64, 1, 1], strides() = [64, 1, 64, 64]
bucket_view.sizes() = [3, 64, 1, 1], strides() = [64, 1, 1, 1] (Triggered internally at ../torch/csrc/distributed/c10d/reducer.cpp:320.)
  Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
2025-03-12 15:27:48,590 INFO: [KUnet..][epoch:459, iter:  40,200, lr:(1.807e-04,1.808e-05,)] [eta: 4 days, 3:20:41, time (data): 1.704 (0.007)] l_pix: -1.7635e+01
2025-03-12 15:34:41,160 INFO: [KUnet..][epoch:460, iter:  40,400, lr:(1.805e-04,1.806e-05,)] [eta: 3 days, 23:20:53, time (data): 1.449 (0.008)] l_pix: -1.8065e+01
2025-03-12 15:41:11,942 INFO: [KUnet..][epoch:460, iter:  40,600, lr:(1.804e-04,1.804e-05,)] [eta: 3 days, 20:19:43, time (data): 0.314 (0.007)] l_pix: -1.8544e+01
2025-03-12 15:47:47,332 INFO: [KUnet..][epoch:461, iter:  40,800, lr:(1.802e-04,1.803e-05,)] [eta: 3 days, 19:01:02, time (data): 5.343 (0.006)] l_pix: -1.6659e+01
2025-03-12 15:54:02,265 INFO: [KUnet..][epoch:462, iter:  41,000, lr:(1.800e-04,1.801e-05,)] [eta: 3 days, 17:17:00, time (data): 3.072 (2.470)] l_pix: -1.7524e+01
2025-03-12 16:00:42,859 INFO: [KUnet..][epoch:462, iter:  41,200, lr:(1.798e-04,1.799e-05,)] [eta: 3 days, 17:02:05, time (data): 4.477 (0.006)] l_pix: -1.7699e+01
2025-03-12 16:07:06,631 INFO: [KUnet..][epoch:463, iter:  41,400, lr:(1.796e-04,1.797e-05,)] [eta: 3 days, 16:17:47, time (data): 0.284 (0.005)] l_pix: -1.8057e+01
2025-03-12 16:13:22,505 INFO: [KUnet..][epoch:463, iter:  41,600, lr:(1.794e-04,1.795e-05,)] [eta: 3 days, 15:29:55, time (data): 1.949 (0.009)] l_pix: -1.8041e+01
2025-03-12 16:20:19,055 INFO: [KUnet..][epoch:464, iter:  41,800, lr:(1.792e-04,1.793e-05,)] [eta: 3 days, 15:50:51, time (data): 2.806 (0.005)] l_pix: -1.8311e+01
2025-03-12 16:26:34,270 INFO: [KUnet..][epoch:465, iter:  42,000, lr:(1.790e-04,1.791e-05,)] [eta: 3 days, 15:11:49, time (data): 0.462 (0.008)] l_pix: -1.8745e+01
2025-03-12 16:33:21,992 INFO: [KUnet..][epoch:465, iter:  42,200, lr:(1.788e-04,1.789e-05,)] [eta: 3 days, 15:17:35, time (data): 0.250 (0.007)] l_pix: -1.8078e+01
2025-03-12 16:40:16,692 INFO: [KUnet..][epoch:466, iter:  42,400, lr:(1.786e-04,1.787e-05,)] [eta: 3 days, 15:28:53, time (data): 3.710 (3.519)] l_pix: -1.9171e+01
2025-03-12 16:46:24,206 INFO: [KUnet..][epoch:466, iter:  42,600, lr:(1.784e-04,1.785e-05,)] [eta: 3 days, 14:49:48, time (data): 0.290 (0.008)] l_pix: -1.8422e+01
2025-03-12 16:52:49,423 INFO: [KUnet..][epoch:467, iter:  42,800, lr:(1.783e-04,1.783e-05,)] [eta: 3 days, 14:31:59, time (data): 0.466 (0.077)] l_pix: -1.6950e+01
2025-03-12 16:58:53,648 INFO: [KUnet..][epoch:468, iter:  43,000, lr:(1.781e-04,1.782e-05,)] [eta: 3 days, 13:57:22, time (data): 0.604 (0.009)] l_pix: -1.8377e+01
2025-03-12 17:05:22,899 INFO: [KUnet..][epoch:468, iter:  43,200, lr:(1.779e-04,1.780e-05,)] [eta: 3 days, 13:46:46, time (data): 4.388 (0.006)] l_pix: -1.7481e+01
2025-03-12 17:12:25,359 INFO: [KUnet..][epoch:469, iter:  43,400, lr:(1.777e-04,1.778e-05,)] [eta: 3 days, 14:02:08, time (data): 0.226 (0.022)] l_pix: -1.7458e+01
2025-03-12 17:19:09,335 INFO: [KUnet..][epoch:469, iter:  43,600, lr:(1.775e-04,1.776e-05,)] [eta: 3 days, 14:01:37, time (data): 0.308 (0.013)] l_pix: -1.8536e+01
2025-03-12 17:26:09,640 INFO: [KUnet..][epoch:470, iter:  43,800, lr:(1.773e-04,1.774e-05,)] [eta: 3 days, 14:11:38, time (data): 0.300 (0.005)] l_pix: -1.7377e+01
2025-03-12 17:32:37,848 INFO: [KUnet..][epoch:471, iter:  44,000, lr:(1.771e-04,1.772e-05,)] [eta: 3 days, 13:59:06, time (data): 5.840 (0.016)] l_pix: -1.8005e+01
2025-03-12 17:38:52,889 INFO: [KUnet..][epoch:471, iter:  44,200, lr:(1.769e-04,1.770e-05,)] [eta: 3 days, 13:39:00, time (data): 0.348 (0.082)] l_pix: -1.8039e+01
2025-03-12 17:45:35,270 INFO: [KUnet..][epoch:472, iter:  44,400, lr:(1.767e-04,1.768e-05,)] [eta: 3 days, 13:36:16, time (data): 0.322 (0.009)] l_pix: -1.8364e+01
2025-03-12 17:52:16,427 INFO: [KUnet..][epoch:472, iter:  44,600, lr:(1.765e-04,1.766e-05,)] [eta: 3 days, 13:32:30, time (data): 4.847 (0.007)] l_pix: -1.7111e+01
2025-03-12 17:59:15,497 INFO: [KUnet..][epoch:473, iter:  44,800, lr:(1.763e-04,1.764e-05,)] [eta: 3 days, 13:38:09, time (data): 3.527 (0.008)] l_pix: -1.7626e+01
2025-03-12 18:05:12,716 INFO: [KUnet..][epoch:474, iter:  45,000, lr:(1.761e-04,1.762e-05,)] [eta: 3 days, 13:10:50, time (data): 2.775 (0.006)] l_pix: -1.8109e+01
2025-03-12 18:11:57,458 INFO: [KUnet..][epoch:474, iter:  45,200, lr:(1.758e-04,1.760e-05,)] [eta: 3 days, 13:08:44, time (data): 0.235 (0.006)] l_pix: -1.8846e+01
2025-03-12 18:18:38,847 INFO: [KUnet..][epoch:475, iter:  45,400, lr:(1.756e-04,1.758e-05,)] [eta: 3 days, 13:04:41, time (data): 4.663 (4.440)] l_pix: -1.7654e+01
2025-03-12 18:24:53,469 INFO: [KUnet..][epoch:475, iter:  45,600, lr:(1.754e-04,1.755e-05,)] [eta: 3 days, 12:48:10, time (data): 0.468 (0.005)] l_pix: -1.8713e+01
2025-03-12 18:31:45,522 INFO: [KUnet..][epoch:476, iter:  45,800, lr:(1.752e-04,1.753e-05,)] [eta: 3 days, 12:48:55, time (data): 2.445 (0.007)] l_pix: -1.8157e+01
2025-03-12 18:38:07,045 INFO: [KUnet..][epoch:477, iter:  46,000, lr:(1.750e-04,1.751e-05,)] [eta: 3 days, 12:36:07, time (data): 0.454 (0.007)] l_pix: -1.7423e+01
2025-03-12 18:44:25,628 INFO: [KUnet..][epoch:477, iter:  46,200, lr:(1.748e-04,1.749e-05,)] [eta: 3 days, 12:22:31, time (data): 0.273 (0.006)] l_pix: -1.7733e+01
2025-03-12 18:51:31,176 INFO: [KUnet..][epoch:478, iter:  46,400, lr:(1.746e-04,1.747e-05,)] [eta: 3 days, 12:28:09, time (data): 0.404 (0.019)] l_pix: -1.8692e+01
2025-03-12 18:57:53,776 INFO: [KUnet..][epoch:478, iter:  46,600, lr:(1.744e-04,1.745e-05,)] [eta: 3 days, 12:16:23, time (data): 3.641 (0.009)] l_pix: -1.8546e+01
2025-03-12 19:04:20,372 INFO: [KUnet..][epoch:479, iter:  46,800, lr:(1.742e-04,1.743e-05,)] [eta: 3 days, 12:06:26, time (data): 2.942 (2.753)] l_pix: -1.7088e+01
2025-03-12 19:10:43,021 INFO: [KUnet..][epoch:480, iter:  47,000, lr:(1.740e-04,1.741e-05,)] [eta: 3 days, 11:55:14, time (data): 4.365 (0.026)] l_pix: -1.7442e+01
2025-03-12 19:17:21,358 INFO: [KUnet..][epoch:480, iter:  47,200, lr:(1.738e-04,1.739e-05,)] [eta: 3 days, 11:49:52, time (data): 0.220 (0.022)] l_pix: -1.8368e+01
2025-03-12 19:24:07,083 INFO: [KUnet..][epoch:481, iter:  47,400, lr:(1.736e-04,1.737e-05,)] [eta: 3 days, 11:46:57, time (data): 0.287 (0.010)] l_pix: -1.8273e+01
2025-03-12 19:30:29,163 INFO: [KUnet..][epoch:481, iter:  47,600, lr:(1.733e-04,1.735e-05,)] [eta: 3 days, 11:35:57, time (data): 0.290 (0.012)] l_pix: -1.8276e+01
2025-03-12 19:37:31,220 INFO: [KUnet..][epoch:482, iter:  47,800, lr:(1.731e-04,1.732e-05,)] [eta: 3 days, 11:38:11, time (data): 0.286 (0.085)] l_pix: -1.7749e+01
2025-03-12 19:44:38,646 INFO: [KUnet..][epoch:483, iter:  48,000, lr:(1.729e-04,1.730e-05,)] [eta: 3 days, 11:41:38, time (data): 3.183 (0.007)] l_pix: -1.7401e+01
2025-03-12 19:51:37,713 INFO: [KUnet..][epoch:483, iter:  48,200, lr:(1.727e-04,1.728e-05,)] [eta: 3 days, 11:42:01, time (data): 0.294 (0.070)] l_pix: -1.8507e+01
2025-03-12 19:58:30,828 INFO: [KUnet..][epoch:484, iter:  48,400, lr:(1.725e-04,1.726e-05,)] [eta: 3 days, 11:40:14, time (data): 4.597 (1.844)] l_pix: -1.8314e+01
2025-03-12 20:04:51,076 INFO: [KUnet..][epoch:484, iter:  48,600, lr:(1.723e-04,1.724e-05,)] [eta: 3 days, 11:28:35, time (data): 0.250 (0.006)] l_pix: -1.8934e+01
2025-03-12 20:11:54,942 INFO: [KUnet..][epoch:485, iter:  48,800, lr:(1.720e-04,1.722e-05,)] [eta: 3 days, 11:29:40, time (data): 2.078 (0.006)] l_pix: -1.8328e+01
2025-03-12 20:18:43,137 INFO: [KUnet..][epoch:486, iter:  49,000, lr:(1.718e-04,1.720e-05,)] [eta: 3 days, 11:26:00, time (data): 0.351 (0.015)] l_pix: -1.6792e+01
2025-03-12 20:25:13,100 INFO: [KUnet..][epoch:486, iter:  49,200, lr:(1.716e-04,1.717e-05,)] [eta: 3 days, 11:17:14, time (data): 0.346 (0.008)] l_pix: -1.8607e+01
2025-03-12 20:32:03,622 INFO: [KUnet..][epoch:487, iter:  49,400, lr:(1.714e-04,1.715e-05,)] [eta: 3 days, 11:14:02, time (data): 3.668 (0.019)] l_pix: -1.7926e+01
2025-03-12 20:38:27,999 INFO: [KUnet..][epoch:487, iter:  49,600, lr:(1.712e-04,1.713e-05,)] [eta: 3 days, 11:03:52, time (data): 2.865 (0.007)] l_pix: -1.7824e+01
2025-03-12 20:45:34,978 INFO: [KUnet..][epoch:488, iter:  49,800, lr:(1.709e-04,1.711e-05,)] [eta: 3 days, 11:04:44, time (data): 3.324 (0.006)] l_pix: -1.8611e+01
2025-03-12 20:51:45,395 INFO: [KUnet..][epoch:489, iter:  50,000, lr:(1.707e-04,1.709e-05,)] [eta: 3 days, 10:51:08, time (data): 3.381 (3.101)] l_pix: -1.8587e+01
  0%|                                                                                          | 0/421 [00:00<?, ?image/s]Traceback (most recent call last):
  File "/home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/basicsr/train.py", line 276, in <module>
    main()
  File "/home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/basicsr/train.py", line 250, in main
    model.validation(val_loader, current_iter, tb_logger,
  File "/home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/basicsr/models/base_model.py", line 49, in validation
    return self.dist_validation(dataloader, current_iter, tb_logger, save_img, rgb2bgr, use_image)
  File "/home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/basicsr/models/image_event_restoration_model.py", line 369, in dist_validation
    return self.nondist_validation(dataloader, current_iter, tb_logger, save_img, rgb2bgr, use_image)
  File "/home/ypatel37/cvpr_pj_25/NTIRE2025_EventDeblur_challenge_asu/basicsr/models/image_event_restoration_model.py", line 432, in nondist_validation
    imwrite(sr_img, save_img_path)
UnboundLocalError: local variable 'save_img_path' referenced before assignment
